// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// freq_count_pio //
// ----------- //

#define freq_count_pio_wrap_target 0
#define freq_count_pio_wrap 8

static const uint16_t freq_count_pio_program_instructions[] = {
  //     .wrap_target
  0x80a0,  //  0: pull   block
  0xa027,  //  1: mov    x, osr
  0x2020,  //  2: wait   0 pin, 0
  0x20a0,  //  3: wait   1 pin, 0
  0x00c6,  //  4: jmp    pin, 6
  0x0007,  //  5: jmp    7
  0x0044,  //  6: jmp    x--, 4
  0xa0c1,  //  7: mov    isr, x
  0x8020,  //  8: push   block
           //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program freq_count_pio_program = {
  .instructions = freq_count_pio_program_instructions,
  .length       = 9,
  .origin       = -1,
};

static inline pio_sm_config freq_count_pio_program_get_default_config(uint offset) {
  pio_sm_config c = pio_get_default_sm_config();
  sm_config_set_wrap(&c, offset + freq_count_pio_wrap_target, offset + freq_count_pio_wrap);
  return c;
}

static inline void freq_count_pio_program_init(PIO pio, uint sm, uint offset, uint pin, double clock_div) {
  pio_sm_config c = freq_count_pio_program_get_default_config(offset);
  pio_gpio_init(pio, pin);
  pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
  sm_config_set_in_pins(&c, pin);
  sm_config_set_jmp_pin(&c, pin);
  sm_config_set_clkdiv(&c, (float)clock_div);
  pio_sm_init(pio, sm, offset, &c);
}

#endif
